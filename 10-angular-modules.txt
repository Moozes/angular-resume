angular modules are NOT JS modules
    angular modules are a way to bundle different part of your app together (components, services, directives, pipes..)
    
we use modules to 
    split code, have leaner elements, maintaine code
    inhance performance WHEN USING lazy loading 
    
different arrays
    declarations: different part declared in a module
    providers: services that are provided globally in that module
    imports: import other modules to use their features 
    boorstrap: the root component, the starting point for your app, usually there is only one
    exports: stuff exposed by a module to be imported in another module
        example: in module A exports: [A1, A2]
        in module B imports: [A] // this means we are importing A1 and A2

angular modules work independently
    components declared in a module can only be used in that module



you can even give every module a routingModule
    AppModule --> AppRoutingModule
    RecipiesModule --> RecipiesRoutingModule // in here we use RouterModule.forChild(routes)

    in AppModule, imports: [AppRoutingModule, RecipiesModule]
    in RecipiesModule, imports: [RecipiesRoutingModule] // no need to export it, it wont be used outside

    since we ve split routing, all components of RecipiesModule are used internally, they are loaded via RecipiesRoutingModule and not AppRoutingModule, so we can remove exports array from RecipiesModule (no need to export them)


Performance inhancing (using lazy loading)
    lazy loading lets you load modules when you need them, and not load every thing from the start
    which means at the start we only download needed code (modules), and when ever we access other pages/features we download them
    so the app will have a short starting time 


    for lazy loading to work, each feature module needs to bring its own routes using RouterModule.forChild
    in AppRoutingModule add a route object
        {
            path: 'recipies',
            loadChildren: () => import('./recipies/recipies.module').then((m) => m.RecipiesModule),
        },
    in AppModule remove RecipiesModule from imports
    in RecipiesRoutingModule, path: "recipies" --> ""
    DONT FORGOT removing unused JS imports or the size of bundles wont shrink

    further more performance inhancement 
        in app-routing.module
            RouterModule.forRoot(
                appRoutes, 
                {preloadingStrategy: PreloadAllModules} // <--- add this
            )
        Provides a preloading strategy that preloads all modules as quickly as possible. BUT initial loading will still be small so you get best of both worlds
        you can even build your own strategies

    Ahead of time compilation (Aot) VS just in time compilation (Jit)
        in development we download angular compiler that parses templates, 
        to avoid this in production use ng build with "--prod" flag this will parse templates before downloading to browser so we dont have to download angular compiler
        NOTE: this might find errors in templates because (Aot) is more strict then (Jit)



IMPORTANT NOTES
    Module A imports Module B
    Module A will have access to all stuff exported by module B, componentes, directives ...
    Module B wont have access to other modules imported by A
    if Module B needs other modules he needs to import them him self

    some exceptions
        BrowserModule: provides ngFor, ngIf, but it can only be imported once in AppModule because it does some general app stuff
            instead import CommonModule to have access to ngFor, ngIf in other modules
        in app module import AppRoutingModule, but in other modules import RouterModule, or there CustomRouter

    you can declare components, directives, pipes only in one module
        if you want to use them in multiple modules, declare them in a shared modules, export them and import that shared module

    Services are special
        when using @Injectable({providedIn: "root"})
        there is no need to import them or export them from any module

        when using providers array in AppModule and you want to make your AppModule leaner
        create CoreModule which only has providers array with those services then import that module in AppModule only and not any other module, and those services will be provided application wide

        there are 4 places where you can provide services
            1-@Injectable({providedIn: "root"}) --OR-- app.module providers array
            2-a component
            3-a normal loaded module providers array
            4-a lazy loaded module providers array

            1 and 3 : the service will be available application wide    (root injector)
            2 : service will be available in component tree             (specific injector)
            4 : the service will be available in that module only       (child injector)

            

            recomendations: 
                always use @Injectable({providedIn: "root"}) --OR-- AppModule providers array
                never use 3
                only use 2 when you need different service instances for different component trees

            FAMOUS BUGS
                when using 1 and three at the same time: service will be provided globally, but for 3 it will have a different instance of that service
                when you provide a service in a shared module (used in other modules) each module importing the shared module will have a different instance of that service, to avoid this create a CoreModule for services and only import it in AppModule and nowhere else.

    When ever you change/add lazy loading:  () => import().then()
        restart dev server
