    Forms
        Template driven VS reactive forms
            TD: you write the template and angular infer the object of the form, heavy work is done on template
            reactive: you write TS code + template + and link them together (more complex, but gives more control) 

        Template driven
            need a form tag in template
            angular will not detect all controls (inputs), you need to specify them manually using: ngModel & name
                <input ngModel name="username"/>
                <select ngModel name="secretQuestion">
                ...
                </select>

            submittion 1 with local references
                <form (ngSubmit)="onSubmit(f)" #f="ngForm">
                ...
                </form>
                ---
                onSubmit(formObject: NgForm) {...}

            submittion 2 with @ViewChild (if you want to access form on submittion and BEFORE submittion also )
                <form (ngSubmit)="onSubmit()" #f="ngForm">
                ...
                </form>
                ---
                @ViewChild("f") signupForm: NgForm
                onSubmit() {
                    console.log(this.signupForm)
                }

            validation
                add validation directives to inputs: required, email ..., a List provided in lecture 190
                angular tracks validation per input level and on the whole form
                    formObject.valid
                    formObject.controls.username.valid 
                validation error message
                    <input
                    ...
                    #username="ngModel" // add a local reference generated by angular
                    />
                    <p *ngIf="!username.valid && username.touched" >hello error here</p>
                angular also dinamically adds classes for us on input: ng-valid, ng-invalid, ng-touched...
                    input.ng-invalid.ng-touched, select.ng-invalid.ng-touched {
                        border: 1px solid red;
                    }
                submit button disabled
                    [disabled]="!f.valid"

            defualt values usgin property binding
                <input
                    [ngModel]="'default value'"
                    --OR--
                    [ngModel]="js expression returning a string"
                />
                ---
                <select [ngModel]="defaultQuestion.value" name="secret">
                    <option value="pet" #defaultQuestion>Your first Pet?</option>
                    <option value="teacher">Your first teacher?</option>
                </select>

            NOTE: 2 way binding is still available
                [(ngModel)]="some js variable"
                
            grouping controls to have a structured form object
                <div ngModelGroup="userData" #userData="ngModelGroup">
                 <input.../> // email
                 <input.../> // name
                </div>
                <p *ngIf="!userData.valid && userData.touched" >hello error here</p>
                ---
                formObject will be: 
                    {
                        controls: {
                            userData: {// it is like a sub form of the main form
                                controls: {name, email}
                                ...
                                value: {name, email},
                            }
                        }
                        ...
                        value: {userData: {email: "", name: ""}}
                    }


            radio buttons
                <div class="radio" *ngFor="let gender of genders">
                    <label>
                        <input 
                            type="radio" 
                            name="gender" 
                            [ngModel]="'male'" // default value
                            [value]="gender" 
                            required>
                        {{ gender }}
                    </label>
                </div>


            set/patch form values programatically
                we need to access form from TS using 
                    @ViewChild("f") signupForm: NgForm

                    suggestUserName() {
                        this.signupForm.setvalue(..override the whole form object..)
                        --or--
                        this.signupForm.form.patchValue({
                            username: "SuperUser"
                        })
                    }

            access the submitted data
                formObject.value

            reset form
                formObject.reset()
                --or--
                formObject.reset( {...} ) // to reset to specific values

                this is similar to formObject.setvalue( {...} )
                but setvalue doesnt reset touched, dirty, valid, ...etc
