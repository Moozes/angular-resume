CLI
    ng new my-app --no-strict
    ng g c component-name
    ng g d attribute-directive-name
    ng serve / npm start

syntaxe
    component
        selector: "app-component-name" 
            <app-component-name></app-component-name>
        selector: "[app-component-name]" 
            <div app-component-name ></div>
        selector: ".app-component-name"
            <div class="app-component-name" ></div>

    databinding
        string interpolation                {{expression}}
        string interpolation in attributes  value={{ expression }}
        property binding                    [disabled]="expression"
        event binding                       (event)="expression" / "function($event)"
        two way binding(event+property)     [(ngModel)]="value"

    pre defined directives
        structural directives
            *ngIf="boolean expression"
            *ngFor="let v of variable; let i = index"
        attribute directives
            [ngStyle]="{color: expression}"
            [ngClass]="{classname : boolean expression, 'class-name' : boolean expression}"
            <div [ngSwitch]="value" >
                <p *ngSwitchCase="5" >...</p>
                <p *ngSwitchCase="10" >...</p>
                <p *ngSwitchDefault >...</p>
            </div>
        
        NOTES
            you cant use multiple structural directives in the same element
                <p
                    *ngFor="..."
                    *ngIf="..."
                ></p>
            in attribute directives, we are binding to a property on the directive which has the same name as the directive: ngClass, ngStyle, ngModel


    Directive VS Component
        Component = Directive + template
        Directive doesnt have a template
        Directive adds functionality to template, like: ngStyle/ngClass/ngModel
        Directive: is like orders to be executed inside a template


    defining custom properties of components
        class component {
            @Input() customProperty: string;
        }
        ----
        <app-component [customProperty]="expression" ></app-component>

    defining custom events of components (in React we pass down functions, in angular we emmit events)
        class component {
            @Output() cutomEvent = new EventEmitter<type of emited data>()
            ...
            someMethod() {
                this.customEvent.emit(data: type of emited data)
            }
        }
        ---
        <app-component (customEvent)="method($event)" ></app-component>


    view encapsulation
        @component({
            ...
            encapsulation: ViewEncapsulation.Emulated // None, style will be applied to all app components
                                                      // ShadowDom, same as emulated but not supported by all browsers 
        })                                            // Emulated, style only applied to component

    
    local references: 
    can be used with any html element
    can only be used inside template code, cant be accessed from ts file, for that use @ViewChild
        <div #titleDiv ></div>
        <input #nameInput />
        
        <button (click)="method(#nameInput)" ></button>
        ---
        method(nameInput: HTMLInputElement) {
            console.log(nameInput.value)
        }


    accessing local references from ts file: 
    we use: @ViewChild(localReference, {static: true})
    we add {static: true} if we are accessing it in ngOnInit() {}
        @ViewChild('nameInput', {static: true}) nameInputRef: ElementRef<HTMLInputElement>
        ...
        method() {
            ...
            console.log(nameInputRef.nativeElement.value)
        }

    NOTE: dont change DOM with local references, 
          like: nameInput.value = "some text"
          or:   nameInputRef.nativeElement.value = "some text"


    rendering content between opening and closing tag (equivelent to props.children in React)
    ng-content: is a directive, doesnt render a template
        <app-component>
            <p> a child paragraph of a component </p>
        </app-component>
        ----in side app-component template
        <div>
        ...
        <ng-content></ng-content> // <p> will be rendered here
        ...
        </div>


    there are multiple lifecycle hooks (8)
        they are executed in order constructor, ngOnInit, ...
        you can access template in any of them using a local reference, but you wont get correct values untill ngAfterViewInit is ran
        you can access content template (ie: children, ng-content) in any of them using a local reference, but you wont get correct values untill ngAfterContentInit is ran


    accessing children template from a ts file
        <div>
            <h1>title</h1>
            <app-custom-component>
                <p #paragraph >this is a child paragraph</p>
            </app-custom-component>
        </div>
        ---
        we can access paragraph in app.component.ts using @ViewChild
        but we cant do the same in custom-component.component.ts
        for that we use @ContentChild("paragraph", {static: true})


    basic directive
        @Directive({
            selector: "[appBasicHeighlight]"
        })
        export class BasicHeighlightDirective implements OnInit {
            constructor(private elementRef: ElementRef) {}

            ngOnInit(): void {
                // BAD PRACTISE!!!!, dont change dom with ref
                this.elementRef.nativeElement.style.backgroundColor = "green"
            }

        }
        ---
        <p appBasicHeighlight >paragraph with green background</p>


        //since changing dom directly is bad practise, we use (renderer: Renderer2) to change dom
        constructor(private elRef: ElementRef, private renderer: Renderer2) { }

        ngOnInit(): void {
            this.renderer.setStyle(this.elRef.nativeElement, 'background-color', "red")
        }
        

        // listen to host events
        @HostListener('mouseenter') mouseenter(event: Event) {
            this.renderer.setStyle(this.elRef.nativeElement, 'background-color', "red")
        }

        //bind to host properties
        @HostBinding('style.backgroundColor') backgroundColor = "transparent";
        ...
        method() {
            this.backgroundColor = "red"
        }


        //define custom directive properties and bind to them
        @Input() defaultColor = "trasnparent"
        ---
        <p directiveSelector [defaultColor]="'yellow'" ></p>

        //cutome directive properties can have the same name as the directive, as in the case of ngClass, ngStyle...
        @Input('directiveSelector') defaultColor = "transparent"
        ---
        <p [directiveSelector]="'yellow'" ></p>

        //you can ommit the square brackets [] and single quotes '' if you are passing down a string and not a ts expression
        <p directiveSelector defaultColor="yellow" ></p>
        ---
        only do this if it is clear that defaultColor is not a native <p> attribute

    
    structural directives behind the scenes
        video 099
        <p *ngIf="booealn expression" ></p>
        ---
        <ng-template [ngIf]="booealn expression">
        <p></p>
        </ng-template>


    
    services
        purpose of services: 
            centrelize repeated logic
            centrelize data (like a store in Redux)
        
        service is just a class
            export class LoggingService {
                logStatusChange(newStatus: string) {
                    console.log('A server status changed, new status: ', newStatus)
                }
            }

        usage in components
            //provide it
            @Component({
                selector: 'app-account',
                templateUrl: './account.component.html',
                styleUrls: ['./account.component.css'],
                providers: [LoggingService]
            })
            //then inject it in the constructor
            constructor(private loggingService: LoggingService) {}
            //then use it
            method() {
                this.loggingService.logStatusChange(...)
            }

        hierarchical
            if provided in a component => all child components can inject it & use it
                                       => all child components will receive the same instance
            if provided in parent and child => child will receive a different instance (override) (not good for data services)
            if provided in app.module.ts => all components AND services can intect and use it