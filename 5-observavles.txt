    Observables
        RXJS: it is third party library (managed by angular) and heavily used by angular, 
            it gives us this concept of observables 

        ------------------
        there are observables and observers
            observables: are events/pieces of data that gets emitted asynchronously
                         events/data could be: data, error, complete
            observers: is where our code goes to respond to data/error/complete
            NOTE: some observables doesnt have to complete (like button events)
                  some do complete like http requests
                  when an observable emits an error the error function will execute, BUT complete function wont execute
                    so it is not like : .then().catch().finaly() syntax where finaly always executes
        ------OR----------
        there are observables and observers and operators in bitween, that changes data before getting to observer
            in this case you need to subscribe to piped observable and not observable it self 
            as shown below

        clean subscriptions
            sub: Subscription
            ngOnInit() {
                this.sub = someObservable.subscribe((...) => {...})
            }
            ngOnDestroy() {
                this.sub.unsubscribe()
            }

        create custom observable
            ngOnInit() {
                // this.sub1 = interval(1000).subscribe(count => console.log(count))
                const customObservable = new Observable((observer) => {
                let count = 0;
                setInterval(() => {
                    observer.next(count); //emit next data
                    if(count >= 3) observer.error("ge 3!"); // emit error and stop observable, no need to clean
                    if(count === 2) observer.complete(); // emit complete and stop observable, no need to clean
                    count++;
                }, 1000);
                });

                //only pass count number > 0
                // add 'round' string before every count number
                const customPipedObservable = customObservable.pipe(
                    filter((data: number) => data > 0),
                    map((data: number) => 'round ' + (data + 1))
                );

                this.sub1 = customPipedObservable.subscribe(
                {
                    next: (data) => console.log(data),
                    error: (data) => console.log(data),
                    complete: () => console.log("complete"),
                }
                );
            }

            NOTE: YOU RARELY CREATE YOUR OWN OBSERVABLES, you usualy use predefined ones 
                like: angular currentRoute.params, or some rxjs observables, 
                just like promises you rarely create them manually

        
        Subject vs EventEmitter
            use Subject in a service for cross component communication (subscribe and clean subscription)
            use EventEmitter for @Output()
            NOTE: an added advantage here is you can use operators (pipes) on your subject because it is a kind of observable 

            Subject vs Observable
                Observable are emited from inside its definition (so this is for passive code like http request)
                Subject can be emitted from outside, calling Subject.next(some data) (so this is for active code, if you want to emit from outside manually)


        Subject vs BehaviorSubject
            A BehaviorSubject holds one value. When it is subscribed it emits the value immediately. A Subject doesn't hold a value.


        Operators
            map
            tap
            take(x) listen for x events then unsubscribe
            exhaustMap(data => return a new Observable): 
                this will change what we subscribe to
                use this when an observable relies on the result of another observable
                example: 
                    someObservable
                    .pipe(
                        take(1),
                        exhaustMap(data-from-firt-observable => return anotherObservable),
                        map(data-of-second-observable => ...)
                    )
                    .subscribe(data-of-second-observable => ...)
            